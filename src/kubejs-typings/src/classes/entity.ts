import { Component } from "../interfaces/component";
import { CompoundTag } from "../interfaces/compound-tag";
import { UUID } from "../interfaces/uuid";
import { BlockContainer } from "./block-container";
import { BlockPos } from "./block-pos";
import { Direction } from "./direction";
import { EntityArrayList } from "./entity-array-list";
import { GameProfile } from "./game-profile";
import { ItemStack } from "./item-stack";
import { RayTraceResult } from "./ray-trace-result";
import { Server } from "./server";
import { SoundEvent } from "./sound-event";
import { World } from "./world";

export interface Entity {
    getLevel(): World;
    getWorld(): World;
    getServer(): Server;
    getId(): UUID;
    getType(): string;
    getName(): string;
    getProfile(): GameProfile;
    getDisplayName(): string;
    tell(message: Component): void;
    getItem(): ItemStack;
    isFrame(): boolean;
    getTags(): Set<string>;
    isAlive(): boolean;
    isLiving(): boolean;
    isPlayer(): boolean;
    isCrouching(): boolean;
    isSprinting(): boolean;
    isSwimming(): boolean;
    isGlowing(): boolean;
    setGlowing(glowing: boolean): void;
    isInvisible(): boolean;
    setInvisible(invisible: boolean): void;
    isInvulnerable(): boolean;
    setInvulnerable(invulnerable: boolean): void;
    isBoss(): boolean;
    isMonster(): boolean;
    isAnimal(): boolean;
    isAmbientCreature(): boolean;
    isWaterCreature(): boolean;
    isPeacefulCreature(): boolean;
    isOnGround(): boolean;
    getFallDistance(): number;
    setFallDistance(fallDistance: number): void;
    getStepHeight(): number;
    setStepHeight(stepHeight: number): void;
    getNoClip(): boolean;
    setNoClip(noClip: boolean): void;
    isSilent(): boolean;
    setSilent(silen: boolean): void;
    getNoGravity(): boolean;
    setNoGravity(noGravity: boolean): void;
    getX(): number;
    setX(x: number): void;
    getY(): number;
    setY(y: number): void;
    getZ(): number;
    setZ(z: number): void;
    getYaw(): number;
    setYaw(yaw: number): void;
    getPitch(): number;
    setPitch(pitch: number): void;
    getMotionX(): number;
    setMotionX(x: number): void;
    getMotionY(): number;
    setMotionY(y: number): void;
    getMotionZ(): number;
    setMotionZ(z: number): void;
    setMotion(x: number, y: number, z: number): void;
    getTicksExisted(): number;
    setPosition(block: BlockContainer): void;
    setPosition(x: number, y: number, z: number): void;
    setRotation(yaw: number, pitch: number): void;
    setPositionAndRotation(x: number, y: number, z: number, yaw: number, pitch: number): void;
    addMotion(x: number, y: number, z: number): void;
    runCommand(command: string): number;
    runCommandSilent(command: string): number;
    kill(): void;
    startRiding(e: Entity, force: boolean): boolean;
    removePassengers(): void;
    dismountRidingEntity(): void;
    getPassengers(): EntityArrayList;
    isPassenger(e: Entity): boolean;
    getRecursivePassengers(): EntityArrayList;
    getRidingEntity(): Entity;
    getTeamId(): string;
    isOnSameTeam(e: Entity): boolean;
    isOnScoreboardTeam(teamID: string): boolean;
    setCustomName(name: Component): void;
    getCustomName(): string;
    getHasCustomName(): boolean;
    setCustomNameAlwaysVisible(b: boolean): void;
    getCustomNameAlwaysVisible(): boolean;
    getHorizontalFacing(): Direction;
    getFacing(): Direction;
    getEyeHeight(): number;
    getBlock(): BlockContainer;
    setOnFire(seconds: number): void;
    extinguish(): void;
    getFullNBT(): CompoundTag;
    setFullNBT(nbt?: CompoundTag): void;
    mergeFullNBT(tag?: CompoundTag): Entity;
    playSound(id: SoundEvent, volumne: number, pitch: number): void;
    playSound(id: SoundEvent): void;
    spawn(): void;
    attack(source: string, hp: number): void;
    attack(hp: number): void;
    rayTrace(distance: number): RayTraceResult;
    isInWater(): boolean;
    isUnderWater(): boolean;
    getDistanceSq(x: number, y: number, z: number): number;
    getDistance(x: number, y: number, z: number): number;
    getDistanceSq(pos: BlockPos): number;
    getDistance(pos: BlockPos): number;
}